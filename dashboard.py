import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import requests
import re

# C·∫•u h√¨nh Streamlit
st.set_page_config(page_title="GEN AI to BI", layout="wide")
st.title("üìä Ph√¢n t√≠ch d·ªØ li·ªáu CSV b·∫±ng AI (Ti·∫øng Vi·ªát)")

# Upload file CSV
uploaded_file = st.file_uploader("üìÅ T·∫£i l√™n file CSV", type=["csv"])

def draw_chart(df, chart_type, x_cols, y_cols=None):
    fig, ax = plt.subplots(figsize=(8,5))
    try:
        if chart_type == "bar":
            if y_cols and len(y_cols) == 1:
                y_col = y_cols[0]
                # N·∫øu y_col l√† "S·ªë l∆∞·ª£ng kh√°ch h√†ng", ƒë·∫øm s·ªë l∆∞·ª£ng theo x_col
                if y_col.lower() in ['s·ªë l∆∞·ª£ng kh√°ch h√†ng', 'sol∆∞·ª£ngkh√°chh√†ng', 'soluongkhachhang']:
                    counts = df[x_cols[0]].value_counts().reset_index()
                    counts.columns = [x_cols[0], y_col]
                    sns.barplot(x=x_cols[0], y=y_col, data=counts, ax=ax, edgecolor='black', linewidth=0)
                    ax.set_xlabel(x_cols[0])
                    ax.set_ylabel(y_col)
                    # Th√™m label s·ªë l∆∞·ª£ng tr√™n bar
                    for i, val in enumerate(counts[y_col]):
                        ax.text(i, val + max(counts[y_col])*0.01, str(val), ha='center', va='bottom')
                else:
                    sns.barplot(x=df[x_cols[0]], y=df[y_col], ax=ax, edgecolor='black', linewidth=0)
                    ax.set_xlabel(x_cols[0])
                    ax.set_ylabel(y_col)
            else:
                counts = df[x_cols[0]].value_counts()
                sns.barplot(x=counts.index, y=counts.values, ax=ax, edgecolor='black', linewidth=0)
                ax.set_xlabel(x_cols[0])
                ax.set_ylabel("S·ªë l∆∞·ª£ng")
                for i, val in enumerate(counts.values):
                    ax.text(i, val + max(counts.values)*0.01, str(val), ha='center', va='bottom')

        elif chart_type == "histogram":
            for col in x_cols:
                sns.histplot(df[col].dropna(), kde=True, ax=ax, label=col, alpha=0.5)
            ax.legend()
        elif chart_type == "scatter":
            if len(x_cols) >= 1 and y_cols and len(y_cols) >= 1:
                sns.scatterplot(x=df[x_cols[0]], y=df[y_cols[0]], ax=ax)
            else:
                st.warning("Scatter c·∫ßn 1 c·ªôt X v√† 1 c·ªôt Y.")
                return None
        elif chart_type == "boxplot":
            if len(x_cols) >= 1 and y_cols and len(y_cols) == 1:
                sns.boxplot(x=df[x_cols[0]], y=df[y_cols[0]], ax=ax)
            else:
                st.warning("Boxplot c·∫ßn 1 c·ªôt category (X) v√† 1 c·ªôt numeric (Y).")
                return None
        else:
            st.warning(f"Lo·∫°i bi·ªÉu ƒë·ªì '{chart_type}' ch∆∞a h·ªó tr·ª£.")
            return None

        ax.set_title(f"{chart_type.title()} - {', '.join(x_cols)}" + (f" vs {', '.join(y_cols)}" if y_cols else ""))
        plt.xticks(rotation=30)
        st.pyplot(fig)
    except Exception as e:
        st.error(f"L·ªói khi v·∫Ω bi·ªÉu ƒë·ªì: {e}")

if uploaded_file is not None:
    df = pd.read_csv(uploaded_file)
    st.subheader("üßæ D·ªØ li·ªáu m·∫´u:")
    st.dataframe(df.head())

    # Th·ªëng k√™ c·ªôt numeric v√† categorical
    num_cols = df.select_dtypes(include=[np.number]).columns.tolist()
    cat_cols = df.select_dtypes(include=['object', 'category']).columns.tolist()
    missing_info = df.isna().mean().round(3)

    st.markdown("### üìå Th·ªëng k√™ nhanh")
    st.write(f"- **S·ªë c·ªôt numeric:** {len(num_cols)}: {num_cols}")
    st.write(f"- **S·ªë c·ªôt category:** {len(cat_cols)}: {cat_cols}")
    st.markdown("**T·ªâ l·ªá thi·∫øu d·ªØ li·ªáu:**")
    st.dataframe(missing_info)

    # T·∫°o prompt b·∫±ng ti·∫øng Vi·ªát, y√™u c·∫ßu ƒë·ªãnh d·∫°ng tr·∫£ l·ªùi r√µ r√†ng
    sample_data = df.head(3).to_dict()
    prompt = f"""
B·∫°n l√† chuy√™n gia ph√¢n t√≠ch d·ªØ li·ªáu chuy√™n nghi·ªáp.
Dataset c√≥ c√°c th√¥ng tin sau:
- C√°c c·ªôt s·ªë: {num_cols}
- C√°c c·ªôt ph√¢n lo·∫°i: {cat_cols}
- T·ªâ l·ªá d·ªØ li·ªáu thi·∫øu: {missing_info.to_dict()}
- V√≠ d·ª• d·ªØ li·ªáu m·∫´u: {sample_data}

H√£y:
1. ƒê∆∞a ra c√°c insight ch√≠nh b·∫±ng ti·∫øng Vi·ªát.
2. G·ª£i √Ω 1 ƒë·∫øn 3 bi·ªÉu ƒë·ªì ph√π h·ª£p ƒë·ªÉ tr·ª±c quan h√≥a d·ªØ li·ªáu.
3. ƒê·ªãnh d·∫°ng g·ª£i √Ω bi·ªÉu ƒë·ªì theo m·∫´u sau (b·∫Øt bu·ªôc ch√≠nh x√°c):
- Chart: [histogram / bar / scatter / boxplot]
- X: [t√™n c·ªôt]
- Y: [t√™n c·ªôt] (c√≥ th·ªÉ kh√¥ng c√≥ n·∫øu kh√¥ng c·∫ßn)
N·∫øu kh√¥ng c√≥ Y th√¨ b·ªè d√≤ng Y.
"""

    st.markdown("### ü§ñ Ph√¢n t√≠ch & g·ª£i √Ω bi·ªÉu ƒë·ªì b·∫±ng Mistral (Ollama)")

    if st.button("Ph√¢n t√≠ch & V·∫Ω bi·ªÉu ƒë·ªì theo LLM"):
        with st.spinner("ƒêang g·ªçi Mistral ph√¢n t√≠ch..."):
            url = "http://localhost:11434/v1/chat/completions"
            headers = {"Content-Type": "application/json"}
            data = {
                "model": "mistral",
                "messages": [
                    {"role": "system", "content": "B·∫°n l√† nh√† ph√¢n t√≠ch d·ªØ li·ªáu chuy√™n nghi·ªáp."},
                    {"role": "user", "content": prompt}
                ],
                "temperature": 0.7,
                "max_tokens": 1024
            }

            try:
                response = requests.post(url, headers=headers, json=data)
                result = response.json()

                # L·∫•y content tr·∫£ v·ªÅ
                if 'message' in result and 'content' in result['message']:
                    content = result['message']['content']
                elif 'choices' in result and len(result['choices']) > 0:
                    content = result['choices'][0]['message']['content']
                else:
                    st.error("M√¥ h√¨nh kh√¥ng tr·∫£ v·ªÅ n·ªôi dung h·ª£p l·ªá.")
                    st.stop()

                # Hi·ªÉn th·ªã insight
                st.subheader("üìå Insight t·ª´ m√¥ h√¨nh (ti·∫øng Vi·ªát):")
                st.write(content)

                # Regex l·∫•y g·ª£i √Ω bi·ªÉu ƒë·ªì
                charts = re.findall(
                    r"Chart:\s*(\w+).*?X:\s*([\w_]+)(?:.*?Y:\s*([\w_]+))?",
                    content, flags=re.IGNORECASE | re.DOTALL)

                if not charts:
                    st.warning("ü§ñ LLM kh√¥ng g·ª£i √Ω bi·ªÉu ƒë·ªì c·ª• th·ªÉ n√†o.")
                else:
                    st.subheader("üìà Bi·ªÉu ƒë·ªì theo g·ª£i √Ω c·ªßa LLM:")
                    # V·∫Ω t·ª´ng bi·ªÉu ƒë·ªì
                    for idx, (chart_type, x_col, y_col) in enumerate(charts):
                        st.markdown(f"**Bi·ªÉu ƒë·ªì {idx+1}:** {chart_type.title()} | X: {x_col}" + (f" | Y: {y_col}" if y_col else ""))
                        draw_chart(df, chart_type.lower(), [x_col], [y_col] if y_col else None)

            except Exception as e:
                st.error(f"L·ªói khi g·ªçi m√¥ h√¨nh Mistral qua Ollama: {e}")

    # --- Ph·∫ßn cho ph√©p ng∆∞·ªùi d√πng ch·ªçn th·ªß c√¥ng ---
    st.markdown("---")
    st.markdown("## üõ†Ô∏è V·∫Ω bi·ªÉu ƒë·ªì t√πy ch·ªçn")

    chart_types = ["histogram", "bar", "scatter", "boxplot"]
    selected_chart = st.selectbox("Ch·ªçn lo·∫°i bi·ªÉu ƒë·ªì", chart_types)

    # Cho ph√©p ch·ªçn nhi·ªÅu c·ªôt (danh s√°ch)
    selected_x_cols = st.multiselect("Ch·ªçn c·ªôt X (c√≥ th·ªÉ ch·ªçn nhi·ªÅu)", df.columns.tolist())
    selected_y_cols = st.multiselect("Ch·ªçn c·ªôt Y (c√≥ th·ªÉ ch·ªçn nhi·ªÅu)", df.columns.tolist())

    if st.button("V·∫Ω bi·ªÉu ƒë·ªì t√πy ch·ªçn"):
        if not selected_x_cols:
            st.warning("Vui l√≤ng ch·ªçn √≠t nh·∫•t 1 c·ªôt X.")
        else:
            draw_chart(df, selected_chart, selected_x_cols, selected_y_cols if selected_y_cols else None)

else:
    st.info("üì§ Vui l√≤ng t·∫£i l√™n file CSV ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
